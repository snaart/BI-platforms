"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö Gapminder
----------------------------------------------------
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç Dash-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö Gapminder.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω 
—Å 1952 –ø–æ 2007 –≥–æ–¥ —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
1. –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
2. –ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –æ—Å—è–º–∏ –∏ —Ä–∞–∑–º–µ—Ä–æ–º –ø—É–∑—ã—Ä—å–∫–æ–≤
3. –¢–æ–ø-15 —Å—Ç—Ä–∞–Ω –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
4. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å–µ–ª–µ–Ω–∏—è –ø–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–º

–ê–≤—Ç–æ—Ä: snaart
–î–∞—Ç–∞: 10.05.2025
"""

# ---------------------------------- –ò–ú–ü–û–†–¢ –ë–ò–ë–õ–ò–û–¢–ï–ö ----------------------------------
from dash import Dash, html, dcc, callback, Output, Input
import plotly.express as px
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np

# ---------------------------------- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ü–ê–†–ê–ú–ï–¢–†–´ ----------------------------------

# URL –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
DATASET_URL = 'https://raw.githubusercontent.com/plotly/datasets/master/gapminder_unfiltered.csv'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç—Ä–∏–∫
METRIC_LABELS = {
    'lifeExp': '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏ (–ª–µ—Ç)',
    'pop': '–ù–∞—Å–µ–ª–µ–Ω–∏–µ (—á–µ–ª–æ–≤–µ–∫)',
    'gdpPercap': '–í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è (USD)'
}

# –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
COLOR_SCHEME = {
    'line': px.colors.qualitative.Plotly,
    'bubble': px.colors.qualitative.Bold,
    'bar': px.colors.qualitative.G10,
    'pie': px.colors.qualitative.Pastel
}

# –°–ª–æ–≤–∞—Ä—å —Å—Ç–∏–ª–µ–π –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
STYLES = {
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞
    'container': {
        'max-width': '1200px',
        'margin': '0 auto',
        'padding': '20px',
        'font-family': 'Arial, sans-serif',
        'background-color': '#f8f9fa'
    },
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞
    'header': {
        'text-align': 'center',
        'padding': '20px 0',
        'margin-bottom': '20px',
        'color': '#2c3e50',
        'font-weight': 'bold',
        'background-color': 'white',
        'border-radius': '8px',
        'box-shadow': '0 2px 4px rgba(0,0,0,0.1)'
    },
    
    # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    'card': {
        'background-color': 'white',
        'border-radius': '8px',
        'box-shadow': '0 2px 6px rgba(0,0,0,0.1)',
        'padding': '20px',
        'margin-bottom': '20px'
    },
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
    'card_title': {
        'color': '#2c3e50',
        'font-size': '18px',
        'margin-bottom': '15px',
        'border-bottom': '1px solid #eee',
        'padding-bottom': '10px'
    },
    
    # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    'control_panel': {
        'background-color': '#f0f2f5',
        'border-radius': '8px',
        'padding': '15px',
        'margin-right': '20px'
    },
    
    # –ú–µ—Ç–∫–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–≤–æ–¥–∞
    'label': {
        'font-weight': 'bold',
        'margin-top': '10px',
        'margin-bottom': '5px',
        'color': '#34495e'
    },
    
    # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
    'dropdown': {
        'margin-bottom': '15px'
    },
    
    # –°–ª–∞–π–¥–µ—Ä
    'slider': {
        'margin-top': '5px',
        'margin-bottom': '20px',
        'padding': '10px 0'
    },
    
    # –ü–∞–Ω–µ–ª—å —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    'hint_panel': {
        'background-color': '#e8f4f8',
        'border-left': '4px solid #3498db',
        'padding': '10px 15px',
        'margin-top': '15px',
        'border-radius': '4px',
        'font-size': '14px'
    },
    
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
    'graph_container': {
        'height': '550px'
    },
    
    # –ù–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
    'footer': {
        'text-align': 'center',
        'padding': '20px 0',
        'margin-top': '20px',
        'color': '#7f8c8d',
        'font-size': '14px',
        'border-top': '1px solid #eee'
    }
}

# ---------------------------------- –ó–ê–ì–†–£–ó–ö–ê –ò –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• ----------------------------------

def load_data():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö Gapminder
    
    Returns:
        pd.DataFrame: –î–∞–Ω–Ω—ã–µ Gapminder
    """
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö Gapminder...")
    df = pd.read_csv(DATASET_URL)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–∏–ø–∞–º
    if df['pop'].dtype != 'int64':
        df['pop'] = df['pop'].astype('int64')
    if df['year'].dtype != 'int64':
        df['year'] = df['year'].astype('int64')
        
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {df.shape[0]} –∑–∞–ø–∏—Å–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ {df['country'].nunique()} —Å—Ç—Ä–∞–Ω–∞—Ö –∑–∞ {df['year'].nunique()} –ª–µ—Ç")
    return df

# ---------------------------------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ----------------------------------

app = Dash(
    __name__, 
    meta_tags=[{"name": "viewport", "content": "width=device-width, initial-scale=1"}],
    title="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ Gapminder"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.config.suppress_callback_exceptions = True

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = load_data()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
years = sorted(df['year'].unique())
countries = sorted(df['country'].unique())

# –û–ø—Ü–∏–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –º–µ—Ç—Ä–∏–∫
metric_options = [{'label': label, 'value': metric} for metric, label in METRIC_LABELS.items()]

# ---------------------------------- –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê ----------------------------------

def create_info_box():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–∞—à–±–æ—Ä–¥–∞
    
    Returns:
        html.Div: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
    """
    return html.Div([
        html.H4("–û –¥–∞–Ω–Ω—ã—Ö Gapminder", style={"margin-bottom": "10px", "color": "#2c3e50"}),
        html.P([
            "–≠—Ç–æ—Ç –¥–∞—à–±–æ—Ä–¥ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö Gapminder, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ",
            "–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏, —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –∏ –í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è –¥–ª—è ",
            "—Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞ —Å 1952 –ø–æ 2007 –≥–æ–¥. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö ",
            "–ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –∏ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã."
        ], style={"line-height": "1.5"}),
    ], style={
        "background-color": "#e3f2fd", 
        "padding": "15px", 
        "border-radius": "8px",
        "margin-bottom": "20px",
        "box-shadow": "0 2px 4px rgba(0,0,0,0.05)"
    })

def create_hint(text):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    
    Args:
        text (str): –¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
    
    Returns:
        html.Div: –ü–∞–Ω–µ–ª—å —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    """
    return html.Div([
        html.P([html.Strong("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: "), text]),
    ], style=STYLES["hint_panel"])

# ---------------------------------- –ö–û–ú–ü–û–ù–ï–ù–¢–´ –í–ö–õ–ê–î–û–ö ----------------------------------

def create_line_chart_tab():
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –ª–∏–Ω–µ–π–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º –∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    
    Returns:
        html.Div: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ —Å –ª–∏–Ω–µ–π–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º
    """
    return html.Div([
        html.Div([
            html.H3("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω –Ω–∞ –ª–∏–Ω–µ–π–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ", style=STYLES["card_title"]),
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫–æ–º
            html.Div([
                # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                html.Div([
                    html.Label("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", style=STYLES["label"]),
                    dcc.Dropdown(
                        id="line-country-selection",
                        options=[{"label": country, "value": country} for country in countries],
                        value=["China", "United States", "Russia", "India"],
                        multi=True,
                        style=STYLES["dropdown"],
                        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω"
                    ),
                    
                    html.Label("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –æ—Å–∏ Y:", style=STYLES["label"]),
                    dcc.Dropdown(
                        id="line-y-axis-selection",
                        options=metric_options,
                        value="lifeExp",
                        style=STYLES["dropdown"]
                    ),
                    
                    create_hint(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω, —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è "
                        "—Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –∏–∑ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ "
                        "–≤ –ª–µ–≥–µ–Ω–¥–µ –≥—Ä–∞—Ñ–∏–∫–∞."
                    )
                ], style={"width": "25%", "display": "inline-block", "vertical-align": "top", **STYLES["control_panel"]}),
                
                # –ì—Ä–∞—Ñ–∏–∫
                html.Div([
                    dcc.Graph(id="line-chart", style=STYLES["graph_container"])
                ], style={"width": "70%", "display": "inline-block", "vertical-align": "top"})
            ], style={"display": "flex"})
        ], style=STYLES["card"])
    ])

def create_bubble_chart_tab():
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –ø—É–∑—ã—Ä—å–∫–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º–æ–π –∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    
    Returns:
        html.Div: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ —Å –ø—É–∑—ã—Ä—å–∫–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º–æ–π
    """
    return html.Div([
        html.Div([
            html.H3("–ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞", style=STYLES["card_title"]),
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫–æ–º
            html.Div([
                # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                html.Div([
                    html.Div("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Å–∏ –∏ —Ä–∞–∑–º–µ—Ä –ø—É–∑—ã—Ä—å–∫–æ–≤:", 
                             style={"font-weight": "bold", "margin-bottom": "15px", "color": "#34495e"}),
                    
                    html.Label("–û—Å—å X:", style=STYLES["label"]),
                    dcc.Dropdown(
                        id="bubble-x-axis",
                        options=metric_options,
                        value="gdpPercap",
                        style=STYLES["dropdown"]
                    ),
                    
                    html.Label("–û—Å—å Y:", style=STYLES["label"]),
                    dcc.Dropdown(
                        id="bubble-y-axis",
                        options=metric_options,
                        value="lifeExp",
                        style=STYLES["dropdown"]
                    ),
                    
                    html.Label("–†–∞–∑–º–µ—Ä –ø—É–∑—ã—Ä—å–∫–∞:", style=STYLES["label"]),
                    dcc.Dropdown(
                        id="bubble-size",
                        options=metric_options,
                        value="pop",
                        style=STYLES["dropdown"]
                    ),
                    
                    html.Label("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", style=STYLES["label"]),
                    dcc.Slider(
                        id="year-slider",
                        min=min(years),
                        max=max(years),
                        value=max(years),
                        marks={year: str(year) for year in years},
                        step=None,
                        tooltip={"placement": "bottom", "always_visible": True},
                        style=STYLES["slider"]
                    ),
                    
                    create_hint(
                        "–ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É —Ç—Ä–∏ –º–µ—Ç—Ä–∏–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: "
                        "–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ—Å—è–º X –∏ Y, –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–º–µ—Ä –ø—É–∑—ã—Ä—å–∫–∞. –¶–≤–µ—Ç –ø—É–∑—ã—Ä—å–∫–æ–≤ "
                        "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—É."
                    )
                ], style={"width": "25%", "display": "inline-block", "vertical-align": "top", **STYLES["control_panel"]}),
                
                # –ì—Ä–∞—Ñ–∏–∫
                html.Div([
                    dcc.Graph(id="bubble-chart", style=STYLES["graph_container"])
                ], style={"width": "70%", "display": "inline-block", "vertical-align": "top"})
            ], style={"display": "flex"})
        ], style=STYLES["card"])
    ])

def create_top15_chart_tab():
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å —Ç–æ–ø-15 —Å—Ç—Ä–∞–Ω –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é –∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    
    Returns:
        html.Div: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ —Å —Ç–æ–ø-15 —Å—Ç—Ä–∞–Ω
    """
    return html.Div([
        html.Div([
            html.H3("–°—Ç—Ä–∞–Ω—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º", style=STYLES["card_title"]),
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫–æ–º
            html.Div([
                # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                html.Div([
                    html.Label("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", style=STYLES["label"]),
                    dcc.Slider(
                        id="top15-year-slider",
                        min=min(years),
                        max=max(years),
                        value=max(years),
                        marks={year: str(year) for year in years},
                        step=None,
                        tooltip={"placement": "bottom", "always_visible": True},
                        style=STYLES["slider"]
                    ),
                    
                    create_hint(
                        "–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ —Å–ª–∞–π–¥–µ—Ä –≥–æ–¥–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω –ø–æ "
                        "–Ω–∞—Å–µ–ª–µ–Ω–∏—é –≤ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –≤—Ä–µ–º–µ–Ω–∏. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, –∫–∞–∫ –º–µ–Ω—è–µ—Ç—Å—è "
                        "–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—Ç—Ä–∞–Ω —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏."
                    )
                ], style={"width": "25%", "display": "inline-block", "vertical-align": "top", **STYLES["control_panel"]}),
                
                # –ì—Ä–∞—Ñ–∏–∫
                html.Div([
                    dcc.Graph(id="top15-chart", style=STYLES["graph_container"])
                ], style={"width": "70%", "display": "inline-block", "vertical-align": "top"})
            ], style={"display": "flex"})
        ], style=STYLES["card"])
    ])

def create_pie_chart_tab():
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º–æ–π –∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    
    Returns:
        html.Div: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ —Å –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º–æ–π
    """
    return html.Div([
        html.Div([
            html.H3("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –º–∏—Ä–∞ –ø–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–º", style=STYLES["card_title"]),
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫–æ–º
            html.Div([
                # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                html.Div([
                    html.Label("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", style=STYLES["label"]),
                    dcc.Slider(
                        id="pie-year-slider",
                        min=min(years),
                        max=max(years),
                        value=max(years),
                        marks={year: str(year) for year in years},
                        step=None,
                        tooltip={"placement": "bottom", "always_visible": True},
                        style=STYLES["slider"]
                    ),
                    
                    create_hint(
                        "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –Ω–∞–≥–ª—è–¥–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –ø–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–º. "
                        "–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ —Å–ª–∞–π–¥–µ—Ä, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –º–µ–Ω—è–ª–æ—Å—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–∏—è "
                        "–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤ —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏."
                    )
                ], style={"width": "25%", "display": "inline-block", "vertical-align": "top", **STYLES["control_panel"]}),
                
                # –ì—Ä–∞—Ñ–∏–∫
                html.Div([
                    dcc.Graph(id="continent-pie-chart", style=STYLES["graph_container"])
                ], style={"width": "70%", "display": "inline-block", "vertical-align": "top"})
            ], style={"display": "flex"})
        ], style=STYLES["card"])
    ])

# ---------------------------------- –ú–ê–ö–ï–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ----------------------------------

app.layout = html.Div([
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞
    html.Div([
        html.H1("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Gapminder"),
        html.P("–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞ —Å 1952 –ø–æ 2007 –≥–æ–¥")
    ], style=STYLES["header"]),
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
    create_info_box(),
    
    # –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª–∞–¥–æ–∫
    dcc.Tabs([
        dcc.Tab(
            label="–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π", 
            children=create_line_chart_tab(),
            style={"padding": "10px"},
            selected_style={"padding": "10px", "border-top": "3px solid #3498db"}
        ),
        dcc.Tab(
            label="–ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", 
            children=create_bubble_chart_tab(),
            style={"padding": "10px"},
            selected_style={"padding": "10px", "border-top": "3px solid #3498db"}
        ),
        dcc.Tab(
            label="–¢–æ–ø-15 —Å—Ç—Ä–∞–Ω –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é", 
            children=create_top15_chart_tab(),
            style={"padding": "10px"},
            selected_style={"padding": "10px", "border-top": "3px solid #3498db"}
        ),
        dcc.Tab(
            label="–ù–∞—Å–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–º", 
            children=create_pie_chart_tab(),
            style={"padding": "10px"},
            selected_style={"padding": "10px", "border-top": "3px solid #3498db"}
        ),
    ], style={"margin-bottom": "20px"}),
    
    # –ù–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
    html.Footer([
        html.P("–î–∞—à–±–æ—Ä–¥ –¥–∞–Ω–Ω—ã—Ö Gapminder ‚Äî 2025"),
        html.P(["Made with ", html.Span("‚ù§", style={"color": "red"}), " using Dash & Plotly"])
    ], style=STYLES["footer"])
], style=STYLES["container"])

# ---------------------------------- CALLBACK –§–£–ù–ö–¶–ò–ò ----------------------------------

@callback(
    Output("line-chart", "figure"),
    [Input("line-country-selection", "value"),
     Input("line-y-axis-selection", "value")]
)
def update_line_chart(countries, y_axis):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏ –º–µ—Ç—Ä–∏–∫–∏
    
    Args:
        countries (list): –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
        y_axis (str): –ú–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –æ—Å–∏ Y
    
    Returns:
        dict: –û–±—ä–µ–∫—Ç figure –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    """
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω
    if not countries:
        fig = go.Figure()
        fig.update_layout(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω—É",
            xaxis_title="–ì–æ–¥",
            yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ",
            template="plotly_white"
        )
        return fig
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç—Ä–∞–Ω–∞–º
    filtered_df = df[df["country"].isin(countries)]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    fig = px.line(
        filtered_df, 
        x="year", 
        y=y_axis, 
        color="country",
        labels={
            y_axis: METRIC_LABELS.get(y_axis, y_axis), 
            "year": "–ì–æ–¥", 
            "country": "–°—Ç—Ä–∞–Ω–∞"
        },
        title=f"–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è ¬´{METRIC_LABELS.get(y_axis, y_axis)}¬ª –ø–æ —Å—Ç—Ä–∞–Ω–∞–º",
        color_discrete_sequence=COLOR_SCHEME["line"],
        template="plotly_white",
        markers=True,  # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —Ç–æ—á–µ–∫
        line_shape="spline"  # –°–≥–ª–∞–∂–∏–≤–∞–µ–º –ª–∏–Ω–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    fig.update_layout(
        legend={"title": "–°—Ç—Ä–∞–Ω—ã", "orientation": "h", "y": -0.2, "x": 0.5, "xanchor": "center"},
        hovermode="closest",
        plot_bgcolor="rgba(240, 240, 240, 0.5)"
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    fig.update_xaxes(tickangle=-45, gridcolor="rgba(200, 200, 200, 0.2)")
    fig.update_yaxes(gridcolor="rgba(200, 200, 200, 0.2)")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    fig.add_annotation(
        x=0.5, y=1.12,
        xref="paper", yref="paper",
        text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏",
        showarrow=False,
        font=dict(size=12)
    )
    
    return fig

@callback(
    Output("bubble-chart", "figure"),
    [Input("bubble-x-axis", "value"),
     Input("bubble-y-axis", "value"),
     Input("bubble-size", "value"),
     Input("year-slider", "value")]
)
def update_bubble_chart(x_axis, y_axis, size, year):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—É–∑—ã—Ä—å–∫–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    
    Args:
        x_axis (str): –ú–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –æ—Å–∏ X
        y_axis (str): –ú–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –æ—Å–∏ Y
        size (str): –ú–µ—Ç—Ä–∏–∫–∞ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –ø—É–∑—ã—Ä—å–∫–æ–≤
        year (int): –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥
    
    Returns:
        dict: –û–±—ä–µ–∫—Ç figure –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    """
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ–¥—É
    filtered_df = df[df["year"] == year]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –º–∞—Å—à—Ç–∞–± –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    use_log_x = x_axis in ["pop", "gdpPercap"]
    use_log_y = y_axis in ["pop", "gdpPercap"]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–∑—ã—Ä—å–∫–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    fig = px.scatter(
        filtered_df, 
        x=x_axis, 
        y=y_axis, 
        size=size,
        color="continent", 
        hover_name="country",
        log_x=use_log_x,
        log_y=use_log_y,
        size_max=50,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–∑—ã—Ä—å–∫–∞ –¥–ª—è –ª—É—á—à–µ–π –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        opacity=0.8,  # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—É–∑—ã—Ä—å–∫–æ–≤ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
        labels={
            x_axis: METRIC_LABELS.get(x_axis, x_axis),
            y_axis: METRIC_LABELS.get(y_axis, y_axis),
            size: METRIC_LABELS.get(size, size),
            "continent": "–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç"
        },
        title=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º –≤ {year} –≥–æ–¥—É",
        color_discrete_sequence=COLOR_SCHEME["bubble"],
        template="plotly_white",
        hover_data={"country": True, x_axis: True, y_axis: True, size: True}  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    fig.update_layout(
        legend={"title": "–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã", "orientation": "h", "y": -0.2, "x": 0.5, "xanchor": "center"},
        hovermode="closest",
        plot_bgcolor="rgba(240, 240, 240, 0.5)"
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    fig.update_xaxes(gridcolor="rgba(200, 200, 200, 0.2)")
    fig.update_yaxes(gridcolor="rgba(200, 200, 200, 0.2)")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    fig.add_annotation(
        x=0.5, y=1.12,
        xref="paper", yref="paper",
        text=f"–î–∞–Ω–Ω—ã–µ –∑–∞ {year} –≥–æ–¥",
        showarrow=False,
        font=dict(size=14, color="#34495e")
    )
    
    return fig

@callback(
    Output("top15-chart", "figure"),
    [Input("top15-year-slider", "value")]
)
def update_top15_chart(year):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ç–æ–ø-15 —Å—Ç—Ä–∞–Ω –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é
    
    Args:
        year (int): –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥
    
    Returns:
        dict: –û–±—ä–µ–∫—Ç figure –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    """
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ–¥—É
    filtered_df = df[df["year"] == year]
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-15 —Å—Ç—Ä–∞–Ω –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é
    top15 = filtered_df.sort_values("pop", ascending=False).head(15)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    fig = px.bar(
        top15, 
        x="country", 
        y="pop", 
        color="continent",
        text=top15["pop"].apply(lambda x: f"{x:,}".replace(",", " ")),  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        labels={
            "pop": "–ù–∞—Å–µ–ª–µ–Ω–∏–µ (—á–µ–ª–æ–≤–µ–∫)", 
            "country": "–°—Ç—Ä–∞–Ω–∞", 
            "continent": "–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç"
        },
        title=f"–¢–æ–ø-15 —Å—Ç—Ä–∞–Ω –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é –≤ {year} –≥–æ–¥—É",
        color_discrete_sequence=COLOR_SCHEME["bar"],
        template="plotly_white"
    )
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∏—Å–ª–∞ –Ω–∞—Å–µ–ª–µ–Ω–∏—è
    fig.update_layout(xaxis={"categoryorder": "total descending"})
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    fig.update_layout(
        legend={"title": "–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã", "orientation": "h", "y": -0.2, "x": 0.5, "xanchor": "center"},
        plot_bgcolor="rgba(240, 240, 240, 0.5)",
        xaxis_tickangle=-45,  # –ù–∞–∫–ª–æ–Ω –ø–æ–¥–ø–∏—Å–µ–π —Å—Ç—Ä–∞–Ω –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        uniformtext_minsize=8,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç–æ–ª–±—Ü–∞—Ö
        uniformtext_mode='hide'  # –°–∫—Ä—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    fig.update_yaxes(
        tickformat=",", 
        gridcolor="rgba(200, 200, 200, 0.2)",
        title={"standoff": 20}  # –û—Ç—Å—Ç—É–ø –æ—Ç –æ—Å–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    fig.update_traces(texttemplate='%{text:.3s}', textposition='outside')
    
    return fig

@callback(
    Output("continent-pie-chart", "figure"),
    [Input("pie-year-slider", "value")]
)
def update_pie_chart(year):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å–µ–ª–µ–Ω–∏—è –ø–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–º
    
    Args:
        year (int): –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥
    
    Returns:
        dict: –û–±—ä–µ–∫—Ç figure –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    """
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ–¥—É
    filtered_df = df[df["year"] == year]
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–º –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–∏—è
    continent_pop = filtered_df.groupby("continent")["pop"].sum().reset_index()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ª—É—á—à–µ–π –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    total_pop = continent_pop["pop"].sum()
    continent_pop["percentage"] = continent_pop["pop"].apply(lambda x: f"{x/total_pop:.1%}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    fig = px.pie(
        continent_pop, 
        values="pop", 
        names="continent",
        title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –ø–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–º –≤ {year} –≥–æ–¥—É",
        labels={
            "continent": "–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç", 
            "pop": "–ù–∞—Å–µ–ª–µ–Ω–∏–µ (—á–µ–ª–æ–≤–µ–∫)",
            "percentage": "–ü—Ä–æ—Ü–µ–Ω—Ç"
        },
        color_discrete_sequence=COLOR_SCHEME["pie"],
        hover_data=["pop", "percentage"],  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
        template="plotly_white"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç–æ–∫
    fig.update_traces(
        textinfo="percent+label",
        textposition="inside",
        textfont_size=12,
        marker=dict(line=dict(color="white", width=2))
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    fig.update_layout(
        legend_title="–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã",
        uniformtext_minsize=12,
        uniformtext_mode="hide",
        margin=dict(t=80, b=20, l=20, r=20)
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—â–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è
    fig.add_annotation(
        x=0.5, y=-0.15,
        xref="paper", yref="paper",
        text=f"–û–±—â–µ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ: {total_pop:,}".replace(",", " "),
        showarrow=False,
        font=dict(size=12)
    )
    
    return fig

# ---------------------------------- –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ----------------------------------

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞ Gapminder...")
    app.run_server(debug=True)
